// ORDEM QUANTIDADE MÁXIMA DE FILHOS -- NÃO MUDA NUNCA
// ALTURA SÃO OS NÍVEIS -- MUDA AO LONGO DO PROGRAMA
// 
// programa construção árvore ordem 5, sorteio para criação dos nós, navegação

//////////////////////////// PROGRAMA QUE IMPLEMENTA UMA ÁRVORE DE ORDEM 5

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

////////////////////////// DECLARAÇÃO DE ESTRUTURAS


struct no {
    int numero;
    struct no *filho1;
    struct no *filho2;
    struct no *filho3;
    struct no *filho4;
    struct no *filho5;
};

////////////////// DECLARAÇÃO DE VARIÁVEIS

struct no *raiz = NULL; // PONTEIRO RAIZ APONTA PARA STRUCT NÓ, que nasce apontando pra NADA

// FUNÇÃO QUE INSERE NÓ NA ÁRVORE

struct no *inserir(struct no *raiz, int numero) { // Devolve um ponteiro inserir que aponta para o struct no, recebe ponteiro raiz que aponta para struct nó e um número inteiro

    if (raiz == NULL) {
    // Caso Fácil: raiz nula (sub-árvore vazia)
        raiz = (struct no *) malloc(sizeof(struct no));
        raiz -> numero = numero;
        raiz -> filho1 = NULL;
        raiz -> filho2 = NULL;
        raiz -> filho3 = NULL;
        raiz -> filho4 = NULL;
        raiz -> filho5 = NULL;
    } else{
        // Caso Dificil: sortear um filho para inserir na árvore

       // time_t t;
       // srand((unsigned) time (&t));

        int sorteio = rand() % 5;

        if (sorteio == 0) {
            raiz -> filho1 = inserir(raiz -> filho1, numero);
        } else if (sorteio == 1) {
            raiz -> filho2 = inserir(raiz -> filho2, numero);
        } else if (sorteio == 2) {
            raiz -> filho3 = inserir(raiz -> filho3, numero);
        } else if (sorteio == 3) {
            raiz -> filho4 = inserir(raiz -> filho4, numero);
        } else if (sorteio == 4) {
            raiz -> filho5 = inserir(raiz -> filho5, numero);
        }
    }

    return raiz;
};



// FUNÇÃO QUE IMPRIME ÁRVORE

void imprimir (struct no *raiz, char *endentador){
    if (raiz != NULL) {
        printf("%s%d\n", endentador, raiz -> numero);

        char *temp = (char *) malloc(sizeof(1024));
        strcpy(temp, endentador);
        strcat(temp, "---");

        imprimir(raiz -> filho1, temp);
        imprimir(raiz -> filho2, temp);
        imprimir(raiz -> filho3, temp);
        imprimir(raiz -> filho4, temp);
        imprimir(raiz -> filho5, temp);
    }
}

// FUNÇÃO PRINCIPAL DE EXECUÇÃO DO PROGRAMA

int main() {
    char *endentador = (char *) malloc(sizeof(1024));
    strcpy(endentador, "");

    int i = 0;

    for (i = 0; i < 100; i++) {
        raiz = inserir(raiz, i);
    }

    imprimir(raiz, endentador);
}
