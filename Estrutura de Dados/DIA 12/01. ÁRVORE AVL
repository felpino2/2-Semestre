// ÁRVORE AVL

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// DECLARAÇÃO DE ESTRUTURA DO NÓ

struct no {
    int numero;
    struct no *esquerda;
    struct no *direita;
    int altura; //raiz é a maior altura
};

// FUNÇÃO QUE RETORNA ALTURA

int getAlturaDoNo (struct no *raiz) {
    return ((raiz == NULL) ? 0 : raiz -> altura); // if raiz igual a null, 0 é true, else é altura

}

// FUNÇÃO QUE RETORNA O MAIOR ENTE DOIS NÚMEROS

int getMaximoEntreDoisNumeros(int a, int b){
    return (a > b) ? a : b;
}

// FUNÇÃO QUE CAPTURA O BALANÇO DA ÁRVORE

int getBalanco(struct no *raiz) {
    int retorno = 0;

    if (raiz != NULL) {
        retorno = (getAlturaDoNo(raiz -> esquerda) - getAlturaDoNo(raiz -> direita));
    }
    return retorno;
}

// FUNÇÃO QUE EXECUTA A ROTÇÃO À ESQUERDA

struct no *rotacaoEsquerda(struct no *raiz) {
    struct no *novaRaiz = raiz -> direita;
    struct no *temp = novaRaiz -> esquerda;

    novaRaiz -> esquerda =  raiz;
    raiz -> direita = temp;

    raiz -> altura = (getMaximoEntreDoisNumeros(getAlturaDoNo(raiz -> esquerda), getAlturaDoNo(raiz -> direita)) + 1);

    novaRaiz -> altura = (getMaximoEntreDoisNumeros(getAlturaDoNo(novaRaiz -> esquerda), getAlturaDoNo(novaRaiz -> direita)) + 1);

    return novaRaiz;
};

// FUNÇÃO QUE EXECUTA A ROTÇÃO À DIREITA

struct no *rotacaoDireita (struct no *raiz) {
    struct no *novaRaiz = raiz -> esquerda;
    struct no *temp = novaRaiz -> direita;

    novaRaiz -> direita =  raiz;
    raiz -> esquerda = temp;
    raiz -> altura = (getMaximoEntreDoisNumeros(getAlturaDoNo(raiz -> direita), getAlturaDoNo(raiz -> esquerda)) + 1);

    novaRaiz -> altura = (getMaximoEntreDoisNumeros(getAlturaDoNo(novaRaiz -> direita), getAlturaDoNo(novaRaiz -> esquerda)) + 1);

    return novaRaiz;
};

// FUNÇÃO QUE INSERE NÓ NA ÁRVORE

struct no *inserir(struct no *raiz, int numero) {
    if (raiz == NULL) {
        raiz = (struct no *) malloc(sizeof(struct no));
        raiz -> numero = numero;
        raiz -> esquerda = NULL;
        raiz -> direita = NULL;
        raiz -> altura = 1;
    } else {
        if (raiz -> numero > numero) {
            raiz -> esquerda = inserir(raiz -> esquerda, numero);
        } else {
            raiz -> direita = inserir(raiz -> direita, numero);
        }
    }
    // pega maior entre os dois abaixo e ele vira o maior+1

    raiz -> altura = (1 + getMaximoEntreDoisNumeros(getAlturaDoNo(raiz -> esquerda), getAlturaDoNo(raiz -> direita)));

    int balanco = getBalanco(raiz); // BALANÇO ESQUERDA - DIREITA

    if ((balanco > 1) && (numero < raiz -> esquerda -> numero)) {
        raiz = rotacaoDireita(raiz); //DESBALANCEADO PARA ESQUERDA, ROTACIONA PARA DIREITA
    }

    if ((balanco < -1) && (numero > raiz -> direita -> numero)) {
        raiz = rotacaoEsquerda(raiz);
    }

    if ((balanco > 1) && (numero > raiz -> esquerda -> numero)){
        raiz -> esquerda = rotacaoEsquerda(raiz -> esquerda);
        raiz = rotacaoDireita(raiz);
    }

    if ((balanco < -1) && (numero < raiz -> direita -> numero)) {
        raiz -> direita = rotacaoDireita(raiz -> direita);
        raiz = rotacaoEsquerda(raiz);
    }
    return raiz;
};

// FUNÇÃO QUE IMPRIME A ÁRVORE

void imprimir(struct no *raiz, char *endentador) {
	if (raiz != NULL) {
	printf("%s%d (A %d)\n", endentador, raiz -> numero, raiz -> altura);

	char *temp = (char *) malloc(1024 * sizeof(char));
	strcpy(temp, endentador);
	strcat(temp, "---");

	imprimir(raiz -> esquerda, temp);
	imprimir(raiz -> direita, temp);
	}
}

int main() {
    struct no *raiz =  NULL;
    int i = 0;

    for (i = 0; i < 10; i++){
        raiz = inserir(raiz, i);
    }

    imprimir(raiz, "");
}
