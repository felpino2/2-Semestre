//////////////////////////
// Arvores Rubro-Negras //
//////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


///////////////////////////////////
// Declaracao da estrutura do no //
///////////////////////////////////

struct no {
	int numero;
	struct no *esquerda;
	struct no *direita;
	int cor;	// 0 preto, 1 vermelho
};


///////////////////////////////////////////////////
// Funcao que rotaciona a arvore para a esquerda //
///////////////////////////////////////////////////

struct no *rotacionarEsquerda(struct no *raiz) {
	struct no *x = raiz -> direita;			// Ponteiro temporario para controle, que aponta para o filho a direita da raiz
	raiz -> direita = x -> esquerda;		// Filho a direita da raiz vai ser o filho a esquerda de x (nova raiz)
	x -> esquerda = raiz;					// Filho a esquerda de x vai apontar para a raiz (sera o filho direito da ex-raiz)
	
	x -> cor = raiz -> cor;					// A cor de x (que vai ser a nova raiz) vai assumir a cor da ex-raiz
	raiz -> cor = 1;						// Novo filho vira vermelho
	
	return x;
}


///////////////////////////////////////////////////
// Funcao que rotaciona a arvore para a direita  //
///////////////////////////////////////////////////

struct no *rotacionarDireita(struct no *raiz) {
	struct no *x = raiz -> esquerda;			// Ponteiro temporario para controle, que aponta para o filho a direita da raiz
	raiz -> direita = x -> direita;				// Filho a direita da raiz vai ser o filho a esquerda de x (nova raiz)
	x -> direita = raiz;						// Filho a esquerda de x vai apontar para a raiz (sera o filho direito da ex-raiz)
	
	x -> cor = raiz -> cor;						// A cor de x (que vai ser a nova raiz) vai assumir a cor da ex-raiz
	raiz -> cor = 1;							// Novo filho vira vermelho
	
	return x;
}


//////////////////////////////////
// Funcao que sobe o vermelho  //
/////////////////////////////////

void subirVermelho(struct no *raiz) {
	raiz -> cor = 1;
	raiz -> esquerda -> cor = 0;
	raiz -> direita -> cor = 0;
}


////////////////////////////////////
// Funcao que devolve a cor do no //
////////////////////////////////////

int vermelho(struct no *raiz) {
	int retorno = 0;
	
	if(raiz != NULL) {
		retorno = raiz -> cor;
	}
	
	return retorno;
}


////////////////////////////////////
// Algoritmo de insersao de um no //
////////////////////////////////////

struct no *inserir(struct no *raiz, int numero) {
	// Algoritmo de insercao na arvore de busca
	if(raiz == NULL) {
		raiz = (struct no *) malloc(sizeof(struct no));
		raiz -> numero = numero;
		raiz -> esquerda = NULL;
		raiz -> direita = NULL;
		raiz -> cor = 1;
	} else {
		if(numero < raiz -> numero) {
			raiz -> esquerda = inserir(raiz -> esquerda, numero);
		} else {
			raiz -> direita = inserir(raiz -> direita, numero);
		}
	}
	
	// Algoritmo de correcao do balanceamento da arvore
	if(vermelho(raiz -> direita) && !vermelho(raiz -> esquerda)) {
		raiz = rotacionarEsquerda(raiz);
	}
	
	if(vermelho(raiz -> esquerda) && vermelho(raiz -> esquerda -> esquerda)) {
		raiz = rotacionarDireita(raiz);
	}
	
	if(vermelho(raiz -> esquerda) && vermelho(raiz -> direita)) {
		subirVermelho(raiz);
	}
	
	return raiz;
}

/////////////////////////////////
// Funcao que imprime a arvore //
/////////////////////////////////

void imprimir(struct no *raiz, char *endentador) {
	if (raiz != NULL) {
	printf("%s%d\n", endentador, raiz -> numero);
	
	char *temp = (char *) malloc(1024 * sizeof(char));
	strcpy(temp, endentador);
	strcat(temp, "---");
	
	imprimir(raiz -> esquerda, temp);
	imprimir(raiz -> direita, temp);
	}
}


int main() {
	struct no *raiz = NULL;
	int i = 0;
	
	for(i = 0; i < 50; i++) {
		raiz = inserir(raiz, i);
	}
	
	imprimir(raiz, "");
}
