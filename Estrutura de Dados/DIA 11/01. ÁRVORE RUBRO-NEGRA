/////////////////////////////////////////////////////
// Programa que implementa uma árvore rubro-negra //
///////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

////////////////////////////////////
// Declaração da estrutura do nó //
//////////////////////////////////

struct no {
	
	int numero;
	struct no *esquerda;
	struct no *direita;
	int cor;
	// 0 é preto, 1 é vermelho.
	
};
////////////////////////////////////////////////
//  Função que rotaciona a árvore à esquerda //
//////////////////////////////////////////////

struct no *rotacionarEsquerda( struct no *raiz ){
		
	struct no *x = raiz -> direita;
	raiz -> direita = x -> esquerda;
	x -> esquerda = raiz;
	
	// ajuste da cor
	x -> cor = raiz -> cor;
	raiz -> cor = 1;
	
	return x;
	
}
///////////////////////
// Função à direita //
/////////////////////

struct no *rotacionarDireita( struct no *raiz ){
		
	struct no *x = raiz -> esquerda;
	raiz -> direita = x -> direita;
	x -> direita = raiz;
	
	// ajuste da cor
	x -> cor = raiz -> cor;
	raiz -> cor = 1;
	
	return x;
	
}

/////////////////////////////////
// Função que sobe o vermelho //
///////////////////////////////

void subirVermelho( struct no *raiz ){
	 
	raiz -> cor = 1;
	raiz -> esquerda -> cor = 0;
	raiz -> direita -> cor = 0;
	
}

/////////////////////////////////////
// Função que devolve a cor do nó //
///////////////////////////////////

int vermelho( struct no *raiz ){
	
	int retorno = 0;
	
	if (raiz != NULL){
		
		retorno = raiz -> cor;
		
	}
	
	return retorno;
	
}

////////////////////////////////////////
// Função que insere um nó na árvore //
//////////////////////////////////////

struct no *inserir( struct no *raiz, int numero ){
	
	if (raiz == NULL){
		
		raiz = (struct no *)malloc(sizeof(struct no));
		raiz -> numero = numero;
		raiz -> esquerda = NULL;
		raiz -> direita = NULL;
		raiz -> cor = 1;
		
	} else {
		
		if (numero < raiz -> numero) {
			
			raiz -> esquerda = inserir(raiz -> esquerda, numero);
			
		} else {
			
			raiz -> direita = inserir(raiz -> direita, numero);
			
		}
		
	}

///////////////////////////////////////////////////////
// Algoritmo de correção de balanceamento da árvore //
/////////////////////////////////////////////////////

	if (vermelho(raiz -> direita) && ! vermelho(raiz -> esquerda)) {
		
		raiz = rotacionarEsquerda(raiz);
		
	} 
	
	if (vermelho(raiz -> esquerda) && vermelho(raiz-> esquerda -> esquerda)){
		
		raiz = rotacionarDireita(raiz);
		
	}
	
	if (vermelho(raiz -> esquerda) && vermelho(raiz -> direita)){
		
		subirVermelho(raiz);
		
	}
	

	return raiz;

}

void imprimir( struct no *raiz, char *indentador) {
	
	if(raiz != NULL){
		
		printf("%s%d\n", indentador, raiz -> numero);
		
		char *temp = (char *) malloc(1024 * sizeof(char));
		strcpy(temp, indentador);
		strcat(temp, "---");
		
		imprimir(raiz -> esquerda, temp);
		imprimir(raiz -> direita, temp);
		
	}
	
}

///////////////////////////////////////////////
// Função principal de execução do programa //
/////////////////////////////////////////////

int main() {
	
	struct no *raiz = NULL;
	int i = 0;
	
	for (i = 0; i < 10 ; i++ ){
		
		raiz = inserir(raiz, i);
			
	}
	
	imprimir(raiz, "");
	
}
